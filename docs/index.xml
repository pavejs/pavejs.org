<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PaveJS</title><link>https://pavejs.org/docs/</link><description>Recent content on PaveJS</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://pavejs.org/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Aliases</title><link>https://pavejs.org/docs/queries/aliases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/queries/aliases/</guid><description>Aliasing Fields Because of the POJO nature of Pave, the only requirements to alias fields is simply another key on a query object. When provided, Pave will take that as the name of the queried type, as demonstrated below.
// Query user, but with an alias query: { myModelNameHere: { _field: 'user' _args: { id: 123 } id: {}, name: {} } } Application This is particularly useful in cases where you need to query the same field twice in the same request, at the same level.</description></item><item><title>Arguments</title><link>https://pavejs.org/docs/queries/arguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/queries/arguments/</guid><description>[Some Header] Every querying language would be a hollow shell if not for the ability to provide arguments to the query. These properties are what can be read and resolved on the server side of your queried function.
// Query fn createUser, with arguments query: { createUser: { _args: { name: 'John Doe', address: '1600 Pennsylvania Ave.', emailAddress: 'jdoe@example.com' } } }</description></item><item><title>Arguments</title><link>https://pavejs.org/docs/schemas-and-types/arguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/schemas-and-types/arguments/</guid><description>Header Content</description></item><item><title>Enumerable Types</title><link>https://pavejs.org/docs/schemas-and-types/enumerable-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/schemas-and-types/enumerable-types/</guid><description>Header Content</description></item><item><title>Extra Packages</title><link>https://pavejs.org/docs/extra-packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/extra-packages/</guid><description>List of Packages pave-basic-types &amp;mdash; A set of basic types for your schema pave-basic-types The pave-basic-types package provides a out-of-the-box set of scalar types for jumpstarting your schema construction. Instead of writing boilerplate types such as string, int, or otherwise, just import this package via your package.json and extract either all of it or just what you need.
Examples All import basicTypes from 'pave-basic-types'; export default { .</description></item><item><title>Fields</title><link>https://pavejs.org/docs/queries/fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/queries/fields/</guid><description>Header Content</description></item><item><title>Introduction</title><link>https://pavejs.org/docs/getting-started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/getting-started/introduction/</guid><description>The Basics Before any queries can be written, or schemas implemented, it is important to first get an understanding for Pave and it&amp;rsquo;s underlying mechanisms, in order to be able to implement a system around it which works in synergy to take full advantage of Pave&amp;rsquo;s features.
Summary Pave is an open-ended querying language written in Javascript (with translations for select alternate languages) that intends to provide a common-ground language of communication between front-end and back-end code.</description></item><item><title>Object Types and Fields</title><link>https://pavejs.org/docs/schemas-and-types/object-types-and-fields/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/schemas-and-types/object-types-and-fields/</guid><description>Header Content</description></item><item><title>Quick Start</title><link>https://pavejs.org/docs/getting-started/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/getting-started/quick-start/</guid><description>5 Minute Setup This guide will walk you through getting Pave setup and working in your project
Installation Getting pave setup and running your environment is easy and painless. Naturally, the first step of setup is to install Pave by declaring it in your package.json file in your project, as shown below.
// In your projects package.json { ... "dependencies": { "pave": "0.10", } } Once this is included in your dependencies, and npm install is ran, Pave will now be included in your project.</description></item><item><title>Scalar Types</title><link>https://pavejs.org/docs/schemas-and-types/scalar-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/schemas-and-types/scalar-types/</guid><description>Header Content</description></item><item><title>Type Language</title><link>https://pavejs.org/docs/schemas-and-types/type-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/schemas-and-types/type-language/</guid><description>Header Content</description></item><item><title>Type System</title><link>https://pavejs.org/docs/schemas-and-types/type-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/schemas-and-types/type-system/</guid><description>Header Content</description></item><item><title>Variables</title><link>https://pavejs.org/docs/queries/variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pavejs.org/docs/queries/variables/</guid><description>Header Content</description></item></channel></rss>